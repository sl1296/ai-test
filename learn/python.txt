1.注释#开头或'''与''' """与"""之间，pass空语句，gc.collect()垃圾回收，sys.getrefcount(var)获取引用次数
2.python2包含中文开头加#coding=utf-8或#-*- coding:utf-8 -*-(推荐)
3.x=input('提示')输入视为字符串；python2中输入视为语句执行，用raw_input()代替
4.print(str[,end=""]) 
%c %s %d/i %u %o %x/X %e/E/f/g/G
5.type(var)获取变量类型，Numbers(int,long,float,complex),bool(True,False),String,List列表,Tuple元组,Dictionary字典
6.类型转换
int(x[,base])
long(x[,base])
float(x)
complex(real[,imag])
str(x)
repr(x)转化为x的表达式字符串
eval(str)计算表达式
tuple(s)序列转元组
list(s)序列转列表
chr(x)整数转字符
unichr(x)整数转unicode字符(python3中用chr)
ord(x)字符转整数
hex(x)整数转16进制字符串'0x...'
oct(x)整数转8进制字符串'0o...'
bin(x)整数转2进制
7.条件==  !=  <>  >  <  >=  <=  x and y  x or y  not x is
if 条件:
    ...
elif 条件:
    ...
else:
    ...
8.保留关键字
import keyword
keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
9.+ -  * / // % ** += -= ...
copy.deepcopy() copy.copy()
程序参数sys.argv，列表
10.循环 break continue
while 条件:
    满足时循环
for x in y:
    y中的每个元素x
else:
    for中没有break执行
11.随机数
import random
random.randint(x,y) [x,y]的随机数
12.字符串
字符串*数字复制字符串
字符串+字符串连接
len(x)长度
'format(整数%d 字符串%s)'%var[%(var,var,...)]
str[x] x<0倒数;x>=0 从0开始标号
str[x:y:s] 取下标[x,y)范围步长s子串，s默认1，x和y默认全部范围
.capitalize()第一个字母大写
.casefold
.center(x)长度x居中
.count(str)子串不重复出现次数
.encode
.endswith(str)是否以str结尾
.expandtabs
.find(str)找子串第一次出现位置，不存在-1
.format
.format_map
.index(str)找子串第一次出现位置，不存在出错
.isalnum()是否数字+字母
.isalpha()是否字母
.isdecimal
.isdigit()是否数字
.isidentifier
.islower
.isnumeric
.isprintable
.isspace()是否空格
.istitle
.isupper
.join([list])用this连接list中的字符串
.ljust(x)长度x左对齐
.lower()转换成小写
.lstrip()删除开头空格
.maketrans
.partition(str)找第一个str子串，返回元组(str左,str,str右)，不存在返回(str,'','')
.replace(pre,now,times)从左到右替换pre为now次数times
.rfind(str)找子串最后一次出现位置，不存在-1
.rindex(str)找子串最后一次出现位置，不存在出错
.rjust(x)长度x右对齐
.rpartition(str)找最后一个str子串，返回元组(str左,str,str右)，不存在返回('','',str)
.rsplit
.rstrip()删除结尾空格
.split(x)按x切割，返回列表[...]；无参数空白分割
.splitlines()按换行split
.startswith(str)是否以str开头
.strip()删除头尾空格
.swapcase
.title()每个单词首字母大写
.translate
.upper()转化成大写
.zfill
13.列表[...,...,...]
[]访问，子串，修改
len(list)获取长度
list+list返回连接两个列表
.append(x)添加到最后
.insert(pos,x)添加x到pos位置
.extend(list)后面连接list列表
.pop()返回最后一个元素并删除
.remove(x)删除第一个元素x，不存在报错
del list[x]删除list的第x个元素
x in/not in list查找元素
.sort()排序 参数reverse=True从大到小排序，参数函数key指定每个元素用于排序的值
.reverse()反转
14.字典{key:value,key:value}
[key]访问，修改(不存在出错)，添加
del dict[key]删除，不存在出错
.get(key)获取key的值，不存在返回None
len(dict)键值对个数
.keys()返回key的列表
.values()返回values的列表
.items()返回[(key,value),(key,value),...]
15.元组(...,...) 不可修改
[]  in  not in
16.函数
def name(para,a=default,b=default):
    '...'/"..."/'''...'''/"""..."""函数help说明
    function
    return x
return a,b,c默认为元组()
global var使用全局变量，否则赋值会定义局部，列表字典不需要
调用name(para,b=...)  name(var_name=value,...)
变长参数def name(a,b,*args,**kwargs)获取元组args，获取参数dict，调用时通过(...,*a,**b)将tuple和dict赋值给args和kwargs
匿名函数lambda 参数:返回值
17.引用式变量存储，数字，字符串，元组为不可变类型，dict和list为可变类型引用赋值
18.文件
f=open('name','way')打开
f.read(长度)返回读取内容，默认全部，读到结尾返回空字符串
f.write(str)写内容，返回写入数量
f.close()关闭
f.readlines()返回一个列表，按行分开\n结尾
f.readline()读取一行\n结尾
f.seek(offset,from)偏移量offset从from=0开头/1当前/2结尾，python3不支持offset<0
f.tell()当前位置
import os
os.rename(pre,now)文件重命名
os.remove(name)文件删除
os.mkdir(name)创建文件夹
os.rmdir(name)删除文件夹
os.getcwd()返回当前路径
os.chdir(path)改变默认路径
os.listdir(path)获取目录列表，返回list
19.类
class Name(父类):#多继承重叠类只保留一个
    __slots__=('name','age')#限制属性
    var=value#定义类属性
    __num=v
    def setnum(self,x):
        self.__num=x
    def getnum(self):
        return self.__num
    num=property(setnum,getnum)
    @property
    def num(self):
        return self.__num
    @num.setter
    def num(self,x):
        self.__num=x
    def __new__(cls):
        return object.__new__(cls)
    def __init__(self[,...]):#必须返回None，可调用多次
        ...
    def __str__(self):#用于print
        ...
        return str
    def __del__(self):#对象删除调用
        ...
        调用父类__del__防止影响垃圾回收
    def __call__(self):#调用类变量
        ...
    @classmethod#定义类方法
    def fun(cls):
        ...
    @staticmethod#定义静态方法
    def fun():
        ...
    def fun(self):
        ...
    ...
x=Name()
x.属性=value添加属性
Name.fun(x)可以调用方法
Name.__mro__返回元组，方法名搜索顺序，C3算法确定顺序
class中定义的__开头的方法和属性是私有，继承也无法使用
object是基类，加(object)新式类
继承函数名相同重写，FatherName.fun(self)或super().fun()在子类中调用父类方法
20.异常
try:
    ...
except NameError as ret:
except a,b,... as ret:#python2
except (a,b,...) as ret:#python3
except:#python2
except Exception:#python3
    ...
    raise
else:
    ...
finally:
    ...
class xxx(Exception):
    ...
raise xxx(...)
21.import
__all__=['name',...]#定义from xx import *的导入内容
if __name__=='__main__':
    ...
包__init__文件中__all__和import(python3:from . import xx)
22.生成器
range(s,e,step)
生成列表[v for ... if ... ...]
x=(v for ... if ... ....)
next(x)最后一个出错
def createnum():
    ...
    yield x
    temp=yeild y
    ...
a=createnum()#生成器对象
next(a)
a.__next__()
a.send(...)
for i in a:
    ....
23.迭代器
可迭代对象:list,tuple,set,dict,str,生成器
from collections import Iterable
isinstance(...,Iterable)
迭代器isinstance(...,Iterator)可以用next返回值的
iter(x)转化iterable对象为iterator
24.闭包：函数嵌套，返回函数，返回函数中保留外层函数参数变量
25.装饰器，函数名前@某函数（闭包）定义时覆盖命名，装饰从下向上，调用从上到下，处理参数和返回值。
装饰器带参数要外面再包一层，@后面内容，由闭包名称换成调用函数返回的闭包
类装饰器：@类名，__init__(self,func)初始化，__call__执行
说明文档是装饰器内层函数中的说明文档
26.作用域：LEGB规则
local局部
enclosing function（闭包）外部嵌套函数
globals全局
builtins内键
名字重整，私有属性为_类名__属性名
dir(__builtins__)查看内置函数
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '_', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']
dir(var)查看属性列表
添加函数,类方法和静态方法直接赋值
import types
instance.fun = types.MethodType(fun,instance)
xxx =  types.MethodType(fun,instance)
xxx()
27.类是对象
type动态创建类：type(类名，父类元组，属性字典)
type类是元类
__class__属性为创建对象的类
__metaclass__属性定义创建类的类，类中，父类中，模块层次中，默认type
自定义元类：
python2中：__metaclass__为函数，3个参数(future_class_name,future_class_parents,future_class_attr)
python3中：类定义继承括号中,metaclass=...
28.垃圾回收
小整数对象池：[-5,257)间整数为提前建立对象，超出为动态分配（大整数对象池）。
intern机制：无特殊字符字符串共用
引用计数，隔代回收
gc.disable()关闭gc
gc.set_debug(flags)设置debug日志，一般为gc.DEBUG_LEAK
gc.collect(generation)清理垃圾，参数0/1/2默认2代，返回不可达对象数
gc.get_threshold()获取gc垃圾回收频率，(变量数-清理数，0代清理次数，1代清理次数)
gc.set_threhold(0[,1[,2]])设定回收频率
gc.get_count()垃圾清理计数器返回列表
29.内建属性
__repr__返回内存表示结果（交互模式变量的返回值），__str__是用于print的
__dict__实例自定义属性
__doc__类文档，子类不继承，help
__bases__父类名称
__getattr__(self,item)找不到属性时调用
__getatribute__(self,obj)属性访问拦截器，访问属性时调用，返回属性值
30.内建函数
range：python2创建list，python3创建生成器相当于python2的xrange
map(函数,可迭代对象)返回迭代器，多参数函数对应后面多个可迭代对象。
filter(函数,可迭代对象)取函数返回值True的值，函数为None全取。
reduce(函数,可迭代对象,初始值)函数双参数，累计调用。
sorted(iterable,cmp=None,key=None,reverse=False)
functools:
partial(fun,...)得到新函数+默认传参数
wraps函数：在装饰器的内部函数前面@functools.wraps(func)保持原有的说明文档
31.集合
a&b交集  a|b并集 a-b差集 a^b对称差集
32.模块
builtins内建函数默认加载
os操作系统接口
sys Python自身的运行环境
functools 常用工具
json 编码解码JSON对象
logging 记录日志调试
multiprocessing 多进程
threading多线程
copy
time
datetime
calendar
hashlib加密算法(md5,sha256)
t=hashlib.md5()
t.update(b"")
t.hexdigest()
random
re字符串正则匹配
socket标准的BSD Sockets API
shutil文件和目录管理
glob基于文件通配符搜索
扩展库：
requests使用urllib3继承了urllib2所有特性
urllib基于http的高层库
scrapy爬虫
beautifulsoup4 HTML/XML解析器
celery分布式任务调度模块
redis缓存
Pillow(PIL)图像处理
xlsxwriter写excel功能，支持xlsx
xlwt写excel功能，支持xls
xlrd读excel功能
elasticsearch全文搜索引擎
pymysql数据库连接库
mongoengine/pymongo  mongodbpython接口
matplotlib画图
numpy/scipy科学计算
django/tornado/flask web框架
xmltodict xml转dict
SimpleHTTPServer 不使用web框架，简单的http server
gevent基于协程的python网络库
fabric系统管理
pandas数据处理库
scikit-learn机器学习库
33.并发，并行
linux中
ret=os.fork()创建子进程，父进程返回子进程id，子进程返回0
os.getpid()获取进程id
os.getppid()获取父进程id
通用
from multiprocessing import Process, Pool, Queue, Manager
p=Process(target=fun)
p.start()等子进程结束父进程才结束
p.join([timeout])阻塞
p.terminate()强制结束
import time
time.sleep(1)
time.ctime()获取具体时间
time.time()获取秒数
继承Process类，调用父类__init__，调用run方法
p=Pool(3)主进程结束导致子进程结束
for i in range(10):
    pool.apply_async(fun,  参数元组,callback=fun2)return父进程回调，return值是参数
    pool.apply(fun,(i,))阻塞添加
p.close()关闭添加
p.join()等待结束
进程通信Queue
q=Queue(3)
q.qsize()大小
q.empty()/q.full()是否空/满
q.put(x)放入/q.put_nowait(x)不等待产生异常
q.get()/q.get_nowait()不等待产生异常
进程池的进程间通信用q=Manager().Queue()创建
线程
from threading import Thread, Lock
t=Thread(target=fun)
t.start()
继承threading.Thread实现run方法.name=Threaed-1
mutex=Lock()互斥锁
mutex.acquire()
mutex.release()
x=threading.local()全局线程独立
gcc xxx.c -shared -o libxxx.so解决GIL问题
from ctypes import *
lib=cdll.LoadLibrary('./libdeadloop.so')加载动态库
t=Thread(target=lib.fun)
t.start()
34.正则表达式
import re
r=re.match(正则表达式，要匹配的字符串)返回Match Object不匹配是None
r.group([x])返回匹配部分，x表示第x个括号对应的内容
r.groups()返回所有括号的元组
.匹配除了\n的任意一个字符
[]匹配一个[]中列举的字符，^取反，a-z0-9
\d匹配一个数字0-9
\D匹配一个非数字
\s匹配一个空白
\S匹配一个非空白
\w匹配一个单词字符a-z,A-Z,0-9,_
\W匹配一个非单词字符
*跟在字符后表示0-无限次
+跟在字符后表示1-无限次
?跟在字符后表示0-1次
{m}跟在字符后表示m次
{[m],[n]}跟在字符后表示m-n次，m默认0，n默认无限
^开头$结尾\b单词边界\B非单词边界
|或
